Imports System.Threading
Module Module1
    Sub Main()
        Dim sUserName As String
        Dim sPassword As String
        Dim entropy As String = Nothing
        Dim description As String
        Dim encrypted As String
        Dim decrypted As String
        Dim jsoncontents As String
        Dim sEncryptedFolderPath As String
        Dim sCredsFile As String
        Dim asCredentials() As String
        Dim asUserName() As String
        Dim asPassword() As String
        Dim sAutomateNuixScriptLog As String
        Dim sMachineName As String
        Dim jsonsettings As Newtonsoft.Json.Linq.JObject
        Dim sConsoleLocations As String
        Dim sLogFileName As String
        Dim bStatus As Boolean
        Dim bUseEncryptedCredentials As Boolean
        Dim bUseWindowsCredentials As Boolean
        Dim sRunInPath As Boolean

        Dim common As New Common

        ' create a new common Logger 
        sAutomateNuixScriptLog = sEncryptedFolderPath & "\AutomateNuixScriptLog - " & sMachineName & "-" & DateTime.Now.ToString("yyyy-MM-dd hh-mm-ss") & ".log"
        common.Logger(sAutomateNuixScriptLog, "Path Environmental Variable = " & My.Application.GetEnvironmentVariable("PATH"))

        ' read in contents of the Settings.json file located in the C:\ProgramData\Nuix\ProcessingFiles\ScriptAutomate folder
        jsoncontents = My.Computer.FileSystem.ReadAllText("C:\ProgramData\Nuix\ProcessingFiles\ScriptAutomate\Settings.json")
        jsonsettings = Newtonsoft.Json.Linq.JObject.Parse(jsoncontents)
        ' check the value of the useencryptedcreds
        bUseEncryptedCredentials = jsonsettings.Item("useencryptedcreds")
        ' if the useencryptedcreds is true
        If bUseEncryptedCredentials = True Then
            ' get the location of the encrypted credentials file
            sEncryptedFolderPath = jsonsettings.Item("dblocation").ToString
            ' the encrypted credentials needs to be in a file called nuixconfig.cfg located in the folder referenced by dblocation
            sCredsFile = sEncryptedFolderPath & "\nuixconfig.cfg"

            If My.Computer.FileSystem.FileExists(sCredsFile) Then
                common.Logger(sAutomateNuixScriptLog, "Decrypting credentials")
                ' get the machine name
                sMachineName = System.Net.Dns.GetHostName

                ' read in the 
                encrypted = My.Computer.FileSystem.ReadAllText(sCredsFile)
                'Call DPAPI To decrypt data.
                decrypted = DPAPI.Decrypt(encrypted, entropy, description)

                asCredentials = Split(decrypted, ":")
                asUserName = Split(asCredentials(0), "=")
                asPassword = Split(asCredentials(1), "=")
                sUserName = asUserName(1)
                sPassword = asPassword(1)
            Else
                common.Logger(sAutomateNuixScriptLog, "The credentials file was not located in the " & sEncryptedFolderPath & " folder.  Please check to ensure the credentials file was created correctly and in the correct locations.")
            End If
        End If
        ' get the value of useWindowsCredentials
        bUseWindowsCredentials = jsonsettings.Item("useWindowsCredentials")
        ' if useWindowsCredentials is False then get the username and password that were entered in the settings.json file
        If bUseWindowsCredentials = False Then
            sUserName = jsonsettings.Item("userName")
            sPassword = jsonsettings.Item("info")
        Else
            sUserName = ""
            sPassword = ""
        End If

        ' get all the version of the nuix_console set in the settings json file
        sConsoleLocations = jsonsettings.Item("consoleLocations")
        common.Logger(sAutomateNuixScriptLog, "Console Locations to use : " & sConsoleLocations)
        common.Logger(sAutomateNuixScriptLog, "Calling Launch Nuix Console Function")

        bStatus = blnLaunchNuixConsole(sConsoleLocations, jsonsettings, sAutomateNuixScriptLog, sUserName, sPassword)
        If bStatus = True Then
            common.Logger(sAutomateNuixScriptLog, "Successfully launched " & sConsoleLocations)
        Else
            common.Logger(sAutomateNuixScriptLog, "Error: There was an error launching " & sConsoleLocations & ". Please check the exceptions above")
        End If
    End Sub

    Public Function blnLaunchNuixConsole(ByVal sConsoleLocations As String, ByVal jsonSettings As Newtonsoft.Json.Linq.JObject, ByVal sLogFileName As String, ByVal sNMSUserName As String, ByVal sNMSUserInfo As String) As Boolean
        Dim common As New Common
        Dim sArguments As String
        Dim sLicenseType As String
        Dim sRegistryServer As String
        Dim sNuixLogFileDir As String
        Dim sScriptToRun As String
        Dim sLicenseName As String
        Dim sNuixWorkers As String
        Dim sNuixAppMemory As String
        Dim sLicenseShortName As String
        Dim asConsoleLocations() As String
        Dim bStatus As Boolean

        blnLaunchNuixConsole = False

        common.Logger(sLogFileName, "Console Location = " & sConsoleLocations)
        common.Logger(sLogFileName, "jsonSettings = " & jsonSettings.ToString)
        common.Logger(sLogFileName, "NMSUser Name = " & sNMSUserName)
        sLicenseType = jsonSettings.Item("licenseType").ToString
        sRegistryServer = jsonSettings.Item("registryServer").ToString
        sNuixLogFileDir = jsonSettings.Item("dblocation").ToString & "\logs"
        sScriptToRun = jsonSettings.Item("scripttorun").ToString
        sNuixWorkers = jsonSettings.Item("nuixWorkers").ToString
        sNuixAppMemory = jsonSettings.Item("nuixAppMemory").ToString
        sLicenseName = jsonSettings.Item("nuixLicense").ToString

        ' get the appropriate license 
        Select Case sLicenseName
            Case "eDiscovery Workstation"
                sLicenseShortName = "enterprise-workstation"
            Case "eDiscovery Reviewer"
                sLicenseShortName = "enterprise-reviewer"
            Case "Corporate eDiscovery"
                sLicenseShortName = "corporate-ediscovery"
            Case "Investigative Reviewer"
                sLicenseShortName = "enterprise-workstation"
            Case "Email Archive Examiner"
                sLicenseShortName = "email-archive-examiner"
            Case "eDiscovery ARX"
                sLicenseShortName = "enterprise-arx"
            Case "Ultimate Workstation"
                sLicenseShortName = "ultimate-workstation"
            Case "Investigation and Response"
                sLicenseShortName = "law-enforcement-desktop"
        End Select

        ' build and exception hanlder to capture any exceptions
        Try
            ' get all the console locations and put into an array
            asConsoleLocations = Split(sConsoleLocations, ",")
            ' loop over each version of the nuix console that was set in the settings.json file
            For Each consolelocation In asConsoleLocations
                ' set the return value for the blnLaunchNuixConsole to False
                blnLaunchNuixConsole = False
                ' set the arguments variable to an empty string
                sArguments = ""

                ' create a new Windows Process for the version of nuix the will be launched
                Dim nuixProcess As Process
                nuixProcess = New Process()
                ' set the startinfo to the version of the nuix console that will be launched
                nuixProcess.StartInfo.FileName = consolelocation

                ' if a registry server was specified in the json file use it with the appropriate switch
                If sRegistryServer <> vbNullString Then
                    sArguments = sArguments & " -Dnuix.registry.servers=" & Trim(sRegistryServer)
                End If

                ' set the licencesource type based on what was set in the json file
                If sLicenseType = "Desktop" Then
                    sArguments = sArguments & " -licencesourcetype dongle"
                ElseIf sLicenseType = "Desktop (dongleless)" Then
                    sArguments = sArguments & " -Dnuix.licence.handlers=system"
                ElseIf sLicenseType = "server" Then
                    sArguments = sArguments & " -licencesourcetype server -licencesourcelocation " & sRegistryServer & " -licencetype " & sLicenseShortName
                ElseIf sLicenseType = "cloud-server" Then
                    sArguments = sArguments & " -licencesourcetype cloud-server -licencesourcelocation " & sRegistryServer & " -licencetype " & sLicenseShortName
                End If

                ' set the other arguments for the nuix startup
                sArguments = sArguments & " -licenceworkers " & sNuixWorkers & " -" & sNuixAppMemory & " -Dnuix.logdir=" & """" & sNuixLogFileDir & """" & " "
                ' add the script to run as the last attribute
                sArguments = sArguments & """" & sScriptToRun & """"

                ' write the argument to the logger
                common.Logger(sLogFileName, "Arguments - " & sArguments)
                ' set the arguments on the nuixProcess
                nuixProcess.StartInfo.Arguments = sArguments
                ' if a username and password were specified or encrypted credentials were used set the environment variable appropriately
                If sNMSUserName <> "" Then
                    nuixProcess.StartInfo.EnvironmentVariables.Add("NUIX_USERNAME", sNMSUserName)
                    nuixProcess.StartInfo.EnvironmentVariables.Add("NUIX_PASSWORD", sNMSUserInfo)
                End If
                ' set the window style to Hidden so there is no command window shown
                nuixProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                ' set the createnowindow to true so no command window is created
                nuixProcess.StartInfo.CreateNoWindow = True
                nuixProcess.StartInfo.UseShellExecute = False
                nuixProcess.StartInfo.RedirectStandardOutput = False
                nuixProcess.StartInfo.RedirectStandardError = False
                nuixProcess.StartInfo.RedirectStandardInput = False
                ' start the nuix_console.exe 
                nuixProcess.Start()
                ' wait until the process finishes before exiting
                nuixProcess.WaitForExit()
            Next
            blnLaunchNuixConsole = True
        Catch ex As Exception
            'if any exception was thrown write it to the log
            common.Logger(sLogFileName, ex.ToString)
            blnLaunchNuixConsole = False
        End Try
    End Function
End Module
